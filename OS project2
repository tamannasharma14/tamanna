 #include<stdio.h>
 #include<string.h>
struct student{
	char name[10];
	int arrival_time;
	int burst_time;
	int c_burst_time;
	int turnaround_time;
	int waiting_time;
	int completition_time;
	int sId;
};
int main()
{	
	int n,b=0;
	char ssId[10];
	printf("Enter number of students\n");
	scanf("%d",&n);
	struct student s[n];
	for(int i=0;i<n;i++)
	{ 
	    printf("\nStudent %d:",i+1);
		printf("\nEnter Student name(eg. a)");
		scanf("%s",&s[i].name);
		printf("\nArrival Time(int >=0):");
		scanf("%d",&s[i].arrival_time);
		printf("\nBurst time(int >0):");
		scanf("%d",&s[i].burst_time);
		printf("\nStudent Id:");
		scanf("%d",&s[i].sId);
		 if(s[i].burst_time<=0||s[i].arrival_time<0)
		{
			printf("\nEnter valid data");
			i--;
		}
		else
		{
		s[i].c_burst_time=s[i].burst_time;
		printf("----------\n");
		}
	}
	struct student temp;
	
	for(int i=0;i<n;i++)
	{
	   for (int j = i + 1; j < n; ++j)
        {
        	if (s[i].arrival_time > s[j].arrival_time) 
            {
                    temp =  s[i];
                    s[i] = s[j];
                    s[j] = temp;
            }
        }
	}
	// finding total burst time
	
	int tbt = 0;
	for(int i=0;i<n;i++)
		tbt = tbt + s[i].burst_time;
		
	
	// finding maximum arrrival time
	
    int max_arr_time = s[0].arrival_time;
   
    for (int i = 1; i < n; i++)
    {
        if (s[i].arrival_time < max_arr_time)
        {
           max_arr_time = s[i].arrival_time;
        }
    }
		// processing 
	int RQ1[n],k1=-1,index=0,tempx,maximum,e=0;
	for(int i=max_arr_time;i<max_arr_time+tbt;i++)
	{	
		for(int j=0;j<n;j++)
		{
			if(s[j].arrival_time==i) //lRTF
			{
				k1++;
				RQ1[k1]=j;
			}
		}
		
			
		if(k1<0)
		{
			tbt++;
		continue;
		}
		else if(k1>=0) 
		{		
		
			//finding process with maximum remaining burst time
			
			if(i==max_arr_time)
			{
		    maximum = s[RQ1[0]].c_burst_time;
		   	index = 0;
		   	}
		   	
		    for (int z = 0; z <=k1; z++)
		    {
		    
		        if (s[RQ1[z]].c_burst_time > maximum)
		        {
		           maximum = s[RQ1[z]].c_burst_time;
				index = z;
		        }
		        else if(s[RQ1[z]].c_burst_time==maximum)
		    	{
		    		if(s[RQ1[index]].sId<=s[RQ1[z]].sId)
		    		{
		    			maximum = s[RQ1[index]].c_burst_time;
					}
					else{
						maximum = s[RQ1[z]].c_burst_time;
						index = z;
					}
				}		        
		    }	
			if(e==0)
			{
		    strcpy(ssId,s[RQ1[index]].name);
		    e++;
		   	}	
				 s[RQ1[index]].c_burst_time = s[RQ1[index]].c_burst_time-1;
				 maximum = s[RQ1[index]].c_burst_time;	 	
			 if(s[RQ1[index]].c_burst_time<=0)
			 {
				  s[RQ1[index]].completition_time = i+1;
			 	 for(int z=index;z<k1;z++)
			 	 {
			 	 	RQ1[z]=RQ1[z+1];
				 }
				 k1--;
				maximum = s[RQ1[0]].c_burst_time;
		   		index = 0;
			 }	
		}
	}
	//finding turnaround time
	for(int i=0;i<n;i++)
	s[i].turnaround_time = s[i].completition_time - s[i].arrival_time;
	//finding waiting time
	for(int i=0;i<n;i++)
	s[i].waiting_time = s[i].turnaround_time - s[i].burst_time;
	//displaying data
	printf("\nProcess ID\tArrival Time\tBurst Time\tStudent Id\tCompletion time\t Turnaround time\t Waiting time\n");
	for(int i=0;i<n;i++)
	{
		printf("%s \t\t %d \t\t %d \t\t %d \t\t %d \t\t  %d \t\t\t %d \n",s[i].name,s[i].arrival_time,s[i].burst_time,s[i].sId,s[i].completition_time,s[i].turnaround_time,s[i].waiting_time);
	}
	int sum=0;
	float avg_wt,avg_tat;
	//calculating average waiting time
	for(int x=0;x<n;x++)
	{
	sum=sum + s[x].waiting_time;
	}
	avg_wt = (float)sum/n;
	sum = 0;
        //calculating average turn around time
	for(int x=0;x<n;x++)
	{
		sum=sum + s[x].turnaround_time;
	}
	avg_tat = (float)sum/n;
	printf("\n\n Average waiting time : %.2f \n Average Turnaround time : %.2f",avg_wt,avg_tat);
	return 0;
}
